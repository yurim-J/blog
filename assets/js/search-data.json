{
  
    
        "post0": {
            "title": "멜론 사이트 최신곡 검색",
            "content": "1) &#47708;&#47200; &#49324;&#51060;&#53944;&#50640;&#49436; &#44397;&#45236; &#52572;&#49888;&#44257; 10&#50948;&#44620;&#51648;&#51032; &#51221;&#48372;&#47484; &#45432;&#47000;&#51228;&#47785;, &#44032;&#49688;, &#50536;&#48276;, &#51339;&#50500;&#50836; &#49688;&#47484; &#52636;&#47141;&#54616;&#49884;&#50724; . url = &#39;https://www.melon.com/new/index.htm&amp;#39; . import requests from bs4 import BeautifulSoup . url1=&#39;https://www.melon.com/new/index.htm&#39; headers = {&#39;User-Agent&#39;:&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36 Edg/95.0.1020.53&#39;} response = requests.get(url1,headers=headers) response.raise_for_status() soup=BeautifulSoup(response.text,&#39;lxml&#39;) Songs = soup.find_all(&#39;div&#39;,attrs={&#39;class&#39;:&#39;ellipsis rank01&#39;}) songlist=[] Singers = soup.find_all(&#39;div&#39;,attrs={&#39;class&#39;:&#39;ellipsis rank02&#39;}) singerlist=[] Albums = soup.find_all(&#39;div&#39;,attrs={&#39;class&#39;:&#39;ellipsis rank03&#39;}) albumlist=[] Likes = soup.find_all(&#39;span&#39;,attrs={&#39;class&#39;:&#39;cnt&#39;}) likelist=[] for song in Songs[0:10]: songlist.append(song.get_text()) for singer in Singers[0:10]: singerlist.append(singer.get_text()) for album in Albums[0:10]: albumlist.append(album.get_text()) print(&#39;노래제목&#39;,songlist) print(&#39;가수&#39;,singerlist) print(&#39;앨범&#39;,albumlist) . 노래제목 [&#39; n어쩜 n&#39;, &#39; nLovelylove (Feat. 최낙타) n&#39;, &#39; nYOU n&#39;, &#39; n우리가 반짝이는 순간 n&#39;, &#39; nWake up (feat. DJ Wegun) n&#39;, &#39; n그래요 (Prod. MeQue) n&#39;, &#39; n잘가요 내사랑 n&#39;, &#39; n언제나 우리 그대로 n&#39;, &#39; nLIGHTNING (번개) (Feat. JINBO) n&#39;, &#39; nJENGA n&#39;] 가수 [&#39; n이승환, 선우정아이승환, 선우정아 n&#39;, &#39; n요다영요다영 n&#39;, &#39; n아티(arty)아티(arty) n&#39;, &#39; n훈스 (HOONS)훈스 (HOONS) n&#39;, &#39; nUntell (언텔)Untell (언텔) n&#39;, &#39; n라 블랑캣 (La Blancat)라 블랑캣 (La Blancat) n&#39;, &#39; n정동원정동원 n&#39;, &#39; n암호 (AMHO)암호 (AMHO) n&#39;, &#39; nTAEO, LVPSTAEO, LVPS n&#39;, &#39; nOVCOCO (오브코코)OVCOCO (오브코코) n&#39;] 앨범 [&#39; n어쩜 n&#39;, &#39; nLovelylove n&#39;, &#39; nYOU n&#39;, &#39; n우리가 반짝이는 순간 n&#39;, &#39; nWake up (feat. DJ Wegun) n&#39;, &#39; n그래요 (Prod. MeQue) n&#39;, &#39; n그리움, 아낌없이 주는 나무 n&#39;, &#39; nThe Piece n&#39;, &#39; nThe WEATHER Project n&#39;, &#39; nJENGA n&#39;] . &#45813; &#50696;&#49884; . response = requests.get(url1, headers=headers) response.raise_for_status() soup = BeautifulSoup(response.text, &#39;html.parser&#39;) all_song=soup.find_all(&#39;tr&#39;) for i,song in enumerate(all_song): #print(song) title = song.find_all(&#39;div&#39;, attrs={&#39;class&#39; : &#39;rank01&#39;}) if len(title)==0: continue if i &gt; 10 : break title = title[0].a.get_text() print(i, title, end=&#39;&#39;) singer = song.find_all(&#39;div&#39;,attrs={&#39;class&#39;:&#39;rank02&#39;}) singer = singer[0].a.get_text() print(singer, end=&#39;&#39;) album = song.find_all(&#39;div&#39;,attrs={&#39;class&#39;:&#39;rank03&#39;}) album = album[0].a.get_text() print(&#39;, 앨범명:&#39;,album) . 1 어쩜이승환, 앨범명: 어쩜 2 Lovelylove (Feat. 최낙타)요다영, 앨범명: Lovelylove 3 YOU아티(arty), 앨범명: YOU 4 우리가 반짝이는 순간훈스 (HOONS), 앨범명: 우리가 반짝이는 순간 5 Wake up (feat. DJ Wegun)Untell (언텔), 앨범명: Wake up (feat. DJ Wegun) 6 그래요 (Prod. MeQue)라 블랑캣 (La Blancat), 앨범명: 그래요 (Prod. MeQue) 7 잘가요 내사랑정동원, 앨범명: 그리움, 아낌없이 주는 나무 8 언제나 우리 그대로암호 (AMHO), 앨범명: The Piece 9 LIGHTNING (번개) (Feat. JINBO)TAEO, 앨범명: The WEATHER Project 10 JENGAOVCOCO (오브코코), 앨범명: JENGA . &#45813;2 . import pandas as pd import requests from bs4 import BeautifulSoup url =&#39;https://www.melon.com/new/index.htm&#39; table = pd.read_html(requests.get(url, headers=headers).text) table[0] . Unnamed: 0 NO 앨범이미지 곡 상세가기 곡정보 앨범 좋아요 듣기 담기 다운 뮤비 . 0 NaN | 1위 | NaN | 곡정보 | 어쩜 이승환, 선우정아 | 어쩜 | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 1 NaN | 2위 | NaN | 곡정보 | Lovelylove (Feat. 최낙타) 요다영 | Lovelylove | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 2 NaN | 3위 | NaN | 곡정보 | YOU 아티(arty) | YOU | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 3 NaN | 4위 | NaN | 곡정보 | 우리가 반짝이는 순간 훈스 (HOONS) | 우리가 반짝이는 순간 | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 4 NaN | 5위 | NaN | 곡정보 | Wake up (feat. DJ Wegun) Untell (언텔) | Wake up (feat. DJ Wegun) | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 5 NaN | 6위 | NaN | 곡정보 | 그래요 (Prod. MeQue) 라 블랑캣 (La Blancat) | 그래요 (Prod. MeQue) | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 6 NaN | 7위 | NaN | 곡정보 | 잘가요 내사랑 정동원 | 그리움, 아낌없이 주는 나무 | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 7 NaN | 8위 | NaN | 곡정보 | 언제나 우리 그대로 암호 (AMHO) | The Piece | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 8 NaN | 9위 | NaN | 곡정보 | LIGHTNING (번개) (Feat. JINBO) TAEO, LVPS | The WEATHER Project | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 9 NaN | 10위 | NaN | 곡정보 | JENGA OVCOCO (오브코코) | JENGA | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 10 NaN | 11위 | NaN | 곡정보 | 보내 오현란 | 두 번째 남편 OST Part.6 | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 11 NaN | 12위 | NaN | 곡정보 | Kitty (Feat. 미연 ((여자)아이들) Kid Milli, dress | Kitty (Feat. 미연 ((여자)아이들) | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 12 NaN | 13위 | NaN | 곡정보 | 더는 볼 수 없겠지 (feat.모닝커피) 하진우 | 더는 볼 수 없겠지 | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 13 NaN | 14위 | NaN | 곡정보 | 물거품 (Mermaid) 도우진 | 푸른야생마: 바다로 가는 길 | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 14 NaN | 15위 | NaN | 곡정보 | 연희동에 찾아와요 조여래 | 연희동에 찾아와요 | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 15 NaN | 16위 | NaN | 곡정보 | Flashing Lights (Feat. The Deep) 이람 | Self-Titled EP | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 16 NaN | 17위 | NaN | 곡정보 | 어때? (Feat. 영운, 혜빈) Flospoon | 어때? | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 17 NaN | 18위 | NaN | 곡정보 | 너라는 바람이 난 좋아 굴뚝새 | 너라는 바람이 난 좋아 | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 18 NaN | 19위 | NaN | 곡정보 | My everything 이정 | My everything | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 19 NaN | 20위 | NaN | 곡정보 | 그대가 부네요 (With 김필) Ecobridge | 그대가 부네요 (With 김필) | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 20 NaN | 21위 | NaN | 곡정보 | Life 윤상미X윤혜진 | HOLIDAY | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 21 NaN | 22위 | NaN | 곡정보 | 우리가 어떻게 헤어져 갓튼 (Godton) | 우리가 어떻게 헤어져 | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 22 NaN | 23위 | NaN | 곡정보 | Hold me like the ocean 혁기 (hucki) | Underwater | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 23 NaN | 24위 | NaN | 곡정보 | Born Again Z-SANG (지상) | Born Again | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 24 NaN | 25위 | NaN | 곡정보 | 이 나이 먹고 뭐했길래 (Feat. 정슬기, 칸토) 미스에스 | 이 나이 먹고 뭐했길래 (TEN PROJECT Part.7) | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 25 NaN | 26위 | NaN | 곡정보 | 대기실 싸이퍼 Yonge Jaundice (영 잔디스), PULLIK (박준호),... | 대기실 싸이퍼 | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 26 NaN | 27위 | NaN | 곡정보 | All I Need 젬마(JEMMA) | 멜랑꼴리아 OST Part 1 | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 27 NaN | 28위 | NaN | 곡정보 | Follow 김슬옹, 데이비드 오 | Follow | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 28 NaN | 29위 | NaN | 곡정보 | 너의 사랑이 날 웃게 해 이민혁 | 너의 사랑이 날 웃게 해 | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 29 NaN | 30위 | NaN | 곡정보 | DAYDREAM Jessica (제시카) | 제시카 &amp; 크리스탈 - US로드트립 OST Part.3 | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 30 NaN | 31위 | NaN | 곡정보 | 너로 가득한 하루 위아영 (WeAreYoung) | 너로 가득한 하루 | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 31 NaN | 32위 | NaN | 곡정보 | 어느 60대 노부부 이야기 이상, 고영열 | 풍류대장 - 힙한 소리꾼들의 전쟁 Episode.7 | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 32 NaN | 33위 | NaN | 곡정보 | 산정호수의 밤 임형주 | Lost In Time(잃어버린 시간 속으로) | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 33 NaN | 34위 | NaN | 곡정보 | 흰 양말 전자양 | 흰 양말 | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 34 NaN | 35위 | NaN | 곡정보 | 좋아좋아 (Feat.최아인) 민지 | 좋아좋아 | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 35 NaN | 36위 | NaN | 곡정보 | 빨간 mong_gle (몽글) | 빨간 | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 36 NaN | 37위 | NaN | 곡정보 | 사랑이 늦어서 미안해 IN THE CITY (인 더 시티) | PLAYBACK #5 &#39;사랑이 늦어서 미안해&#39; | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 37 NaN | 38위 | NaN | 곡정보 | 별의 조각 윤하 (YOUNHA) | YOUNHA 6th Album &#39;END THEORY&#39; | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 38 NaN | 39위 | NaN | 곡정보 | 서로의 서로 적재 | 서로의 서로 | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 39 NaN | 40위 | NaN | 곡정보 | 남아있어 (feat. Horim) 제이스틴 (ZAYSTIN) | 남아있어 | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 40 NaN | 41위 | NaN | 곡정보 | GROW UP bobae | GROW UP | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 41 NaN | 42위 | NaN | 곡정보 | 생각의 역습 전남친, 디핵 (D-Hack) | 생각의 역습 | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 42 NaN | 43위 | NaN | 곡정보 | 아직 잊을 수가 없어서 (Feat. 리디아) 더 라임 | 아직 잊을 수가 없어서 | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 43 NaN | 44위 | NaN | 곡정보 | Sequence One Off Them | Sequence | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 44 NaN | 45위 | NaN | 곡정보 | It&#39;s Cold (feat. BOiTELLO) Aden (에이든) | It&#39;s Cold | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 45 NaN | 46위 | NaN | 곡정보 | 나보다 너를 더 (Feat. Mingginyu) Bas Bao (바스바오) | 나보다 너를 더 | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 46 NaN | 47위 | NaN | 곡정보 | Fly 강다니엘, 챈슬러 | 싸이월드 BGM 2021 | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 47 NaN | 48위 | NaN | 곡정보 | CALL ME BACK (Feat. OLNL, YEYEBEEN) PEAXE MARKET | CALL ME BACK | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 48 NaN | 49위 | NaN | 곡정보 | 지나갈거야 BigDD N SoulPowder | 지나갈거야 | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 49 NaN | 50위 | NaN | 곡정보 | 별빛을 따라 ODD-CAT (오드캣) | 별빛을 따라 | 좋아요 총건수 0 | 듣기 | 담기 | 다운로드 | 뮤직비디오 | . 2) &#45348;&#51060;&#48260;&#50640;&#49436; bts&#51060;&#48120;&#51648;&#47484; &#44160;&#49353;&#54620; &#54980; &#45208;&#50728; &#44208;&#44284; &#51473; 5&#44060;&#51032; &#51060;&#48120;&#51648;&#47484; &#51200;&#51109; . url = &#39;https://search.naver.com/search.naver?where=image&amp;sm=tab_jum&amp;query=bts&amp;#39; . import requests from bs4 import BeautifulSoup import os import time . from selenium import webdriver . # headers = {&#39;User-Agent&#39;:&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36 Edg/95.0.1020.53&#39;} # response = requests.get(url2,headers=headers) # response.raise_for_status() # soup = BeautifulSoup(response.text, &#39;lxml&#39;) # cookie=soup.find_all(&#39;div&#39;,attrs={&#39;class&#39;:&#39;thumb&#39;}) # print(cookie) # for i, movie in enumerate(Kuromi): # title = movie[&#39;alt&#39;] # img_url = movie[&#39;src&#39;] # #print((i+1),&quot;:&quot;,img_url) # img_res=requests.get(img_url) # img_res.raise_for_status() # with open(img_dir+&#39;m{}_{}&#39;.format((i+1),title)+&#39;.jpg&#39;,&#39;wb&#39;) as f: # f.write(img_res.content) # time.sleep(1) # print(&#39;그림 저장 완료&#39;) . [] . url=&#39;https://search.naver.com/search.naver?where=image&amp;sm=tab_jum&amp;query=%EC%BF%A0%EB%A1%9C%EB%AF%B8&#39; headers = {&#39;User-Agent&#39;:&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36 Edg/95.0.1020.53&#39;} response = requests.get(url,headers=headers) response.raise_for_status() soup=BeautifulSoup(response.text, &#39;html.parser&#39;) #내부 파서 사용 driver=webdriver.Chrome() #셀레늄을 이용하여 특정 사이트로 이동한 후 1초동안 대기 driver.get(url) time.sleep(1) soup = BeautifulSoup(driver.page_source) kuromi_imgs = soup.find_all(&#39;img&#39;,attrs={&#39;class&#39;:&#39;_image_listImage&#39;}) print(&#39;그림의 개수:&#39;,len(kuromi_imgs)) #첫 화면에 보이는 이미지의 개수=&gt; #이미지 저장할 폴더 생성 img_dir=&#39;./kuromi_img/&#39; if not os.path.exists(img_dir): #디렉토리가 없으면 생성 os.makedirs(img_dir) print(&#39;폴더생성&#39;) else: print(&#39;폴더가 존재함&#39;) for i,image in enumerate(kuromi_imgs): img_url = image[&#39;src&#39;] if(not img_url.startswith(&#39;http&#39;)): continue img_src = requests.get(img_url,headers=headers) img_src.raise_for_status() with open(img_dir + &#39;kuromi_{}.jpg&#39;.format(i),&#39;wb&#39;)as f: f.write(img_src.content) if i &gt;10: break; print(&#39;쿠로미 사진 저장 완료&#39;) . 그림의 개수: 0 폴더가 존재함 쿠로미 사진 저장 완료 . temp1=&#39;http://www.naver.com&#39; temp2=&#39;http://www.daum.net&#39; print(temp1.startswith(&#39;http&#39;)) print(temp2.startswith(&#39;http&#39;)) print(temp1.endswith(&#39;com&#39;)) . True True True .",
            "url": "https://yurim-j.github.io/blog/%ED%81%AC%EB%A1%A4%EB%A7%81/python/2021/12/08/Exercise-01.html",
            "relUrl": "/%ED%81%AC%EB%A1%A4%EB%A7%81/python/2021/12/08/Exercise-01.html",
            "date": " • Dec 8, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://yurim-j.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://yurim-j.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://yurim-j.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://yurim-j.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}